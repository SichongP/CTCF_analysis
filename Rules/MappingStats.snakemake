localrules: collect_stats, collect_filtered_stats
###
#This rule collection describes rules to generate and gather mapping stats, including initial mapping, duplication rate, and filtering stats
###

###Input
#Results/mapping/{sample}_markdup.bam
#Results/mapping/{sample}_filtered.bam
###

###Output
#"Results/metrics/filtered_stats.csv"
#"Results/metrics/mapping_stats.csv"
###

rule bam_stat:
    input: "Results/mapping/{sample}_markdup.bam"
    output: "Results/mapping/stats/{sample}.stats.txt"
    conda: "envs/sambamba.yaml"
    params: time="60"
    threads: 2
    log: "Results/logs/mapping/stat_bam_{sample}.log"
    benchmark: "Results/benchmarks/mapping/stat_bam_{sample}.tsv"
    shell:
     """
     sambamba flagstat -t {threads} {input} 2>{log} 1>{output}
     """

rule filtered_stat:
    input: "Results/mapping/{sample}_filtered.bam"
    output: "Results/mapping/filtered_stats/{sample}.stats.txt"
    conda: "envs/sambamba.yaml"
    params: time = "60"
    threads: 2
    log: "Results/logs/mapping/stat_filtered_{sample}.tsv"
    shell:
     """
     sambamba flagstat -t {threads} {input} 1>{output} 2>{log}
     """

rule collect_stats:
    input: expand("Results/mapping/stats/{sample}.stats.txt", sample = names)
    params: dir = "Results/mapping/stats/"
    output: "Results/metrics/mapping_stats.csv"
    conda: "envs/stat_curator.yaml"
    script: "tools/flagstat_curator.py"

rule collect_filtered_stats:
    input: expand("Results/mapping/filtered_stats/{sample}.stats.txt", sample = names)
    params: dir = "Results/mapping/filtered_stats/"
    output: "Results/metrics/filtered_stats.csv"
    conda: "envs/stat_curator.yaml"
    script: "tools/flagstat_curator.py"

