localrules: gatherJSD
###
#This rule collection describes rules to generate quality metrics from CTCF ChIPseq
###

###Input
#Results/mapping/{sample}_filtered.bam
###

###Output
#Results/metrics/Quality_Metrics.csv
#Results/figures/
###

rule spp_stats:
    input: "Results/mapping/{sample}_filtered.bam"
    output: 
        stat = "Results/metrics/spp/{sample}_spp_stats.txt",
        fig = "Results/figures/{sample}_Cross_Correlation.pdf"
    threads: 6
    params: time="90"
    conda: "../envs/spp_stats.yaml"
    shell:
     """
     Rscript tools/run_spp.R -c={input} -rf -out={output.stat} -p={threads} -s=0:2:400 -savp={output.fig}
     """
    

rule bamCompare:
    input: exp = "Results/mapping/{sample}_filtered.bam",
        exp_bai = "Results/mapping/{sample}_filtered.bam.bai",
        ctrl = "Results/mapping/{sample}_Input_filtered.bam",
        ctrl_bai = "Results/mapping/{sample}_Input_filtered.bam.bai"
    output: "Results/deeptools/bigwig/{sample}_scaled.bw"
    conda: "../envs/deeptools.yaml"
    threads: 6
    params: time = "120"
    log: "Results/logs/deeptools/bamCompare_{sample}.log"
    benchmark: "Results/benchmarks/deeptools/{sample}_bamCompare.tsv"
    shell:
     """
     bamCompare -b1 {input.exp} -b2 {input.ctrl} -o {output} -p {threads} --scaleFactorsMethod SES --effectiveGenomeSize {config[genome_size]} --ignoreDuplicates --extendReads 150 &> {log}
     """

rule multiBigwigSummary:
    input: expand("Results/deeptools/bigwig/{rep}_{sample}_scaled.bw", sample = tissues, rep = reps)
    output: "Results/deeptools/multiBigwigSummary.npz"
    conda: "../envs/deeptools.yaml"
    threads: 8
    params: time = "120"
    log: "Results/logs/deeptools/multiBamSummary.log"
    shell:
     """
     multiBigwigSummary bins --bwfiles {input} -o {output} --smartLabels -p {threads} &> {log}
     """

rule plotFingerprint_all:
    input: expand("Results/mapping/{rep}_{sample}_filtered.bam", rep = reps, sample = tissues)
    output:
        plot = "Results/figures/Fingerprint.png",
    conda: "../envs/deeptools.yaml"
    params: time = "360"
    threads: 4
    log: "Results/logs/deeptools/fingerprint.log"
    shell:
     """
     plotFingerprint --bamfiles {input} -o {output.plot} -p {threads} --skipZeros -T "Fingerprint plot" --smartLabels
     """

rule calcJSD:
    input:
        trt = "Results/mapping/{sample}_filtered.bam",
        ctrl = "Results/mapping/{sample}_Input_filtered.bam",
        trt_bai = "Results/mapping/{sample}_filtered.bam.bai",
        ctrl_bai = "Results/mapping/{sample}_Input_filtered.bam.bai"
    output:
        metric = temp("Results/metrics/{sample}_LibraryQC.tsv"),
        plot = "Results/figures/fingerprints/{sample}_Fingerprint.png"
    conda: "../envs/deeptools.yaml"
    params: time = "60"
    threads: 2
    log: "Results/logs/deeptools/{sample}_JSD.log"
    benchmark: "Results/benchmarks/{sample}_JSD.tsv"
    shell:
     """
     plotFingerprint --bamfiles {input.trt} {input.ctrl} -o {output.plot} --outQualityMetrics {output.metric} --JSDsample {input.ctrl} -p {threads} --skipZeros -T "{wildcards.sample} Fingerprint plot" --smartLabels --ignoreDuplicates
     """

rule gatherJSD:
    input: expand("Results/metrics/{rep}_{tissue}_LibraryQC.tsv", rep = reps, tissue = tissues)
    output: "Results/metrics/QC_metrics.tsv"
    script: "../tools/gatherJSD.py"

rule Calc_QCMetrics:
    input:
        spp = expand("Results/metrics/spp/{rep}_{tissue}_spp_stats.txt", rep = reps, tissue = tissues),
        JSD = expand("Results/metrics/{rep}_{tissue}_LibraryQC.tsv", rep = reps, tissue = tissues),
        bam = expand("Results/mapping/{rep}_{tissue}_markdup.bam", rep = reps, tissue = tissues),
        filt_bam = expand("Results/mapping/{rep}_{tissue}_filtered.bam", rep = reps, tissue = tissues)
    output: "Results/metrics/LibQ_Metrics.tsv"
    conda: "../envs/bedtools.yaml"
    params: time = "90", samples = expand("{rep}_{tissue}", rep = reps, tissue = tissues)
    log: "Results/logs/deeptools/LibQC.log"
    script: "../tools/calcQCMetrics.py"


rule plotPCA:
    input: "Results/deeptools/multiBigwigSummary.npz"
    output: "Results/figures/PCA.png"
    conda: "../envs/deeptools.yaml"
    params: time = "60"
    threads: 4
    log: "Results/logs/deeptools/pca.log"
    shell:
     """
     plotPCA --corData {input} -o {output} -T "PCA plot" --outFileNameData "Results/metrics/pca.tab" --transpose &> {log}
     """

rule plotCorrelationHM_spearman:
    input: "Results/deeptools/multiBigwigSummary.npz"
    output: "Results/figures/heatmap_spearman.png"
    conda: "../envs/deeptools.yaml"
    params: time = "60"
    threads: 4
    log: "Results/logs/deeptools/heatmap_spearman.log"
    shell:
     """
     plotCorrelation -in {input} -c spearman -p heatmap --skipZeros -o {output} --removeOutliers --plotTitle "Spearman correlation of average scores per bin"
     """

rule plotCorrelationHM_pearson:
    input: "Results/deeptools/multiBigwigSummary.npz"
    output: "Results/figures/heatmap_pearson.png"
    conda: "../envs/deeptools.yaml"
    params: time = "60"
    threads: 4
    log: "Results/logs/deeptools/heatmap_pearson.log"
    shell:
     """
     plotCorrelation -in {input} -c pearson -p heatmap --skipZeros -o {output} --removeOutliers --plotTitle "Pearson correlation of average scores per bin"
     """

rule plotCorrelationSP_pearson:
    input: "Results/deeptools/multiBigwigSummary.npz"
    output: "Results/figures/scatterplot_pearson.png"
    conda: "../envs/deeptools.yaml"
    params: time = "60"
    threads: 4
    log: "Results/logs/deeptools/scatterplot_pearson.log"
    shell:
     """
     plotCorrelation -in {input} -c pearson -p scatterplot --skipZeros -o {output} --removeOutliers --plotTitle "Pearson correlation of average scores per bin"
     """

rule plotCorrelationSP_spearman:
    input: "Results/deeptools/multiBigwigSummary.npz"
    output: "Results/figures/scatterplot_spearman.png"
    conda: "../envs/deeptools.yaml"
    params: time = "60"
    threads: 4
    log: "Results/logs/deeptools/scatterplot_spearman.log"
    shell:
     """
     plotCorrelation -in {input} -c spearman -p scatterplot --skipZeros -o {output} --removeOutliers --plotTitle "Spearman correlation of average scores per bin"
     """



